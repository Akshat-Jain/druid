# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Github workflow that runs standard/old ITs

name: "Standard ITs workflow"
on:
  workflow_call:
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      # run everything if not a PR
      core: ${{ steps.filter.outputs.core || github.event_name != 'pull_request'}}
      common-extensions: ${{ steps.filter.outputs.common-extensions }}
    steps:
      - uses: dorny/paths-filter@v3.0.0
        if: github.event_name == 'pull_request'
        id: filter
        with:
          filters: |
            common-extensions:
              - 'extension-core/(mysql-metadata-storage|druid-basic-security|simple-client-sslcontext|druid-testing-tools|druid-lookups-cached-global|druid-histogram|druid-datasketches|druid-parquet-extensions|druid-avro-extensions|druid-protobuf-extensions|druid-orc-extensions|druid-kafka-indexing-service|druid-s3-extensions)/**'
            core:
              - '!extension*/**'

  integration-k8s-leadership-tests:
    needs: changes
    name: (Compile=openjdk17, Run=openjdk17, Cluster Build On K8s) ITNestedQueryPushDownTest integration test
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.common-extensions == 'true' }}
    runs-on: ubuntu-22.04
    env:
      MVN: mvn --no-snapshot-updates
      MAVEN_SKIP: -P skip-static-checks -Dweb.console.skip=true -Dmaven.javadoc.skip=true
      CONFIG_FILE: k8s_run_config_file.json
      IT_TEST: -Dit.test=ITNestedQueryPushDownTest
      POD_NAME: int-test
      POD_NAMESPACE: default
      BUILD_DRUID_CLUSTER: true
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: setup java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # the build step produces SNAPSHOT artifacts into the local maven repository,
      # we include github.sha in the cache key to make it specific to that build/jdk
      - name: Restore Maven repository
        id: maven-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-17-${{ github.sha }}
          restore-keys: setup-java-Linux-maven-${{ hashFiles('**/pom.xml') }}

      - name: Maven build
        if: steps.maven-restore.outputs.cache-hit != 'true'
        run: |
          ./it.sh ci

      - name: Monitor Resources Before IT
        run: |
          echo "--- Disk Usage (df -h) ---"
          df -h
          echo "--- Inode Usage (df -i) ---"
          df -i
          echo "--- Memory Usage (free -h) ---"
          free -h
          echo "--- CPU Info (lscpu) ---"
          lscpu
          echo "--- Uptime / Load Average (uptime) ---"
          uptime
          echo "--- VM Stats (vmstat 1 3) ---"
          vmstat 1 3
          echo "--- Top Processes (top -bn1) ---"
          top -bn1
          echo "--- Process List (ps auxf) ---"
          ps auxf
          echo "--- End Resource Monitoring Before IT ---"

      - name: Run IT
        id: test
        timeout-minutes: 30 # Keep reduced timeout for this test
        run: |
          echo "--- Java Version ---"
          java -version
          echo "--- Maven Version ---"
          mvn -v
          echo "--------------------"

          COMMON_SKIP_FLAGS="-Pskip-static-checks -Pskip-tests -Dmaven.javadoc.skip=true"
          PARALLEL_FLAG="-T1C" # Keeping -T1C as per working example

          echo "Phase 1: Building core modules (EXCLUDING web-console, benchmarks, distribution)"
          MAVEN_OPTS='-XX:+ExitOnOutOfMemoryError' mvn -B -X clean install --fail-at-end \
            -pl '!benchmarks,!distribution,!web-console' \
            ${COMMON_SKIP_FLAGS} \
            ${PARALLEL_FLAG}

          if [ $? -ne 0 ]; then
            echo "Phase 1 failed! web-console might not be the problem."
            exit 1
          fi
          echo "Finished Phase 1 successfully (web-console was excluded)."

          # --- Phase 2: Build distribution module ---
          echo "Phase 2: Building distribution module"
          # Mimic working command: install, --fail-at-end, -pl, explicit skips, Pdist/bundle, -T1C, -Prat
          # Keep diagnostics: -X, ExitOnOutOfMemoryError. Start without explicit -Xmx.
          MAVEN_OPTS='-XX:+ExitOnOutOfMemoryError' mvn -B -X install --fail-at-end \
            -pl distribution \
            -Pdist -Pbundle-contrib-exts \
            ${COMMON_SKIP_FLAGS} \
            ${PARALLEL_FLAG}

          # Check exit code of Phase 2 before proceeding
          if [ $? -ne 0 ]; then
            echo "Phase 2 failed!"
            exit 1
          fi
          echo "Finished Phase 2 successfully."

          # --- Phase 3: Run the actual tests ---
          echo "Phase 3: Running integration tests"
          echo "MAVEN_OPTS='-Xmx2048m' ${MVN} verify -pl integration-tests -P int-tests-config-file ${IT_TEST} ${MAVEN_SKIP} -Dpod.name=${POD_NAME} -Dpod.namespace=${POD_NAMESPACE} -Dbuild.druid.cluster=${BUILD_DRUID_CLUSTER}"
          MAVEN_OPTS='-Xmx2048m' ${MVN} verify -pl integration-tests -P int-tests-config-file ${IT_TEST} ${MAVEN_SKIP} -Dpod.name=${POD_NAME} -Dpod.namespace=${POD_NAMESPACE} -Dbuild.druid.cluster=${BUILD_DRUID_CLUSTER}
          echo "Successfully completed the integration test"

      - name: Monitor Resources After IT
        if: always()
        run: |
          echo "--- Status of Previous Step (Run IT): ${{ steps.test.conclusion }} ---"
          echo "--- Disk Usage (df -h) ---"
          df -h
          echo "--- Inode Usage (df -i) ---"
          df -i
          echo "--- Memory Usage (free -h) ---"
          free -h
          echo "--- CPU Info (lscpu) ---"
          lscpu
          echo "--- Uptime / Load Average (uptime) ---"
          uptime
          echo "--- VM Stats (vmstat 1 3) ---"
          vmstat 1 3
          echo "--- Top Processes (top -bn1) ---"
          top -bn1
          echo "--- Process List (ps auxf) ---"
          ps auxf
          echo "--- End Resource Monitoring After IT ---"

      - name: Debug on failure
        if: ${{ failure() && steps.test.conclusion == 'failure' }}
        run: |
          for v in broker middlemanager router coordinator historical ; do
          echo "------------------------druid-tiny-cluster-"$v"s-0-------------------------";
          /usr/local/bin/kubectl logs --tail 1000 druid-tiny-cluster-"$v"s-0 ||:;
          /usr/local/bin/kubectl get events | grep druid-tiny-cluster-"$v"s-0 ||:;
          done
