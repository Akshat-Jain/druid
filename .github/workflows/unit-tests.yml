# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

name: "Unit tests workflow"
on:
  workflow_call:
    inputs:
      jdk:
        required: true
        type: string
        description: 'JDK version used to test Druid'
    outputs:
      continue_tests:
        description: 'Flag to decide if next tests need to run incase coverage issue failures'
        value: ${{ jobs.check_results.outputs.should_continue }}

jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      kafka: ${{ steps.filter.outputs.kafka }}
      kinesis: ${{ steps.filter.outputs.kinesis }}
      # run everything if not a PR
      core: ${{ steps.filter.outputs.core  || github.event_name != 'pull_request'}}
    steps:
      - uses: dorny/paths-filter@v3.0.0
        if: github.event_name == 'pull_request'
        id: filter
        with:
          filters: |
            core:
              - '!extension*/**'
            kafka:
              - 'extensions-core/kafka-indexing-service/**'
            kinesis:
              - 'extensions-core/kinesis-indexing-service/**'

  indexing_modules_test:
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        test_range: [ 'A-K', 'L-Z' ]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.kafka == 'true' || needs.changes.outputs.kinesis == 'true'}}
    uses: ./.github/workflows/reusable-unit-tests.yml
    with:
      jdk: ${{ inputs.jdk }}
      module: indexing
      maven_projects: 'indexing-hadoop,indexing-service,extensions-core/kafka-indexing-service,extensions-core/kinesis-indexing-service'
      test_range: ${{ matrix.test_range }}

  processing_modules_test:
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        test_range: [ 'A-K', 'L-Z' ]
    if: ${{ needs.changes.outputs.core == 'true' }}
    uses: ./.github/workflows/reusable-unit-tests.yml
    with:
      jdk: ${{ inputs.jdk }}
      module: processing
      maven_projects: 'processing'
      test_range: ${{ matrix.test_range }}

  server_modules_test:
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' }}
    uses: ./.github/workflows/reusable-unit-tests.yml
    with:
      jdk: ${{ inputs.jdk }}
      module: server
      maven_projects: 'server'

  other_modules_test:
    uses: ./.github/workflows/reusable-unit-tests.yml
    strategy:
      fail-fast: false
      matrix:
        test_range: [ 'A-K', 'L-Z' ]
    with:
      jdk: ${{ inputs.jdk }}
      module: other
      maven_projects: '!processing,!indexing-hadoop,!indexing-service,!extensions-core/kafka-indexing-service,!extensions-core/kinesis-indexing-service,!server,!web-console,!integration-tests,!:druid-it-tools,!:druid-it-image,!:druid-it-cases'
      test_range: ${{ matrix.test_range }}

  check_results:
    needs: [indexing_modules_test, processing_modules_test, server_modules_test, other_modules_test]
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.check.outputs.continue }}
    steps:
      - id: check
        run: |
          echo "Debug: Starting check_results evaluation"
          
          # Raw values
          echo "Raw indexing_modules_test result: ${{ toJSON(needs.indexing_modules_test.result) }}"
          echo "Raw indexing_modules_test outputs: ${{ toJSON(needs.indexing_modules_test.outputs) }}"
          
          echo "Raw processing_modules_test result: ${{ toJSON(needs.processing_modules_test.result) }}"
          echo "Raw processing_modules_test outputs: ${{ toJSON(needs.processing_modules_test.outputs) }}"
          
          echo "Raw server_modules_test result: ${{ needs.server_modules_test.result }}"
          echo "Raw server_modules_test outputs: ${{ toJSON(needs.server_modules_test.outputs) }}"
          
          echo "Raw other_modules_test result: ${{ toJSON(needs.other_modules_test.result) }}"
          echo "Raw other_modules_test outputs: ${{ toJSON(needs.other_modules_test.outputs) }}"
          
          # Computed values
          INDEXING_SUCCESS="${{ contains(needs.indexing_modules_test.result, 'success') || contains(needs.indexing_modules_test.result, 'skipped') }}"
          INDEXING_COVERAGE="${{ contains(fromJson(needs.indexing_modules_test.outputs.*.coverage_failure || '[]'), true) }}"
          echo "Computed INDEXING_SUCCESS: $INDEXING_SUCCESS"
          echo "Computed INDEXING_COVERAGE: $INDEXING_COVERAGE"
          
          PROCESSING_SUCCESS="${{ contains(needs.processing_modules_test.result, 'success') || contains(needs.processing_modules_test.result, 'skipped') }}"
          PROCESSING_COVERAGE="${{ contains(fromJson(needs.processing_modules_test.outputs.*.coverage_failure || '[]'), true) }}"
          echo "Computed PROCESSING_SUCCESS: $PROCESSING_SUCCESS"
          echo "Computed PROCESSING_COVERAGE: $PROCESSING_COVERAGE"
          
          SERVER_SUCCESS="${{ needs.server_modules_test.result == 'success' || needs.server_modules_test.result == 'skipped' }}"
          SERVER_COVERAGE="${{ fromJson(needs.server_modules_test.outputs.coverage_failure || 'false') }}"
          echo "Computed SERVER_SUCCESS: $SERVER_SUCCESS"
          echo "Computed SERVER_COVERAGE: $SERVER_COVERAGE"
          
          OTHER_SUCCESS="${{ contains(needs.other_modules_test.result, 'success') || contains(needs.other_modules_test.result, 'skipped') }}"
          OTHER_COVERAGE="${{ contains(fromJson(needs.other_modules_test.outputs.*.coverage_failure || '[]'), true) }}"
          echo "Computed OTHER_SUCCESS: $OTHER_SUCCESS"
          echo "Computed OTHER_COVERAGE: $OTHER_COVERAGE"
          
          # Final evaluation
          if [[ "$INDEXING_SUCCESS" == "true" || "$INDEXING_COVERAGE" == "true" ]] && \
             [[ "$PROCESSING_SUCCESS" == "true" || "$PROCESSING_COVERAGE" == "true" ]] && \
             [[ "$SERVER_SUCCESS" == "true" || "$SERVER_COVERAGE" == "true" ]] && \
             [[ "$OTHER_SUCCESS" == "true" || "$OTHER_COVERAGE" == "true" ]]; then
            echo "Final evaluation: Setting continue=true"
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "Final evaluation: Setting continue=false"
            echo "continue=false" >> $GITHUB_OUTPUT
          fi
